---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

// Import all speaker images with proper typing
const speakerImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/speakers/*.{jpeg,jpg,png,webp}",
);

interface Props {
  talks: CollectionEntry<"events">["data"]["talks"];
}

const { talks } = Astro.props;
if (!talks || !Array.isArray(talks)) {
  return null;
}
---

<div class="grid gap-4">
  {
    talks.map((talk) => (
      <div class="flex flex-col gap-1">
        <div class="flex items-center gap-2">
          <ul class="flex shrink-0 items-center">
            {talk.speakers.map(async (speaker, index) => {
              const imagePath = `/src/assets/speakers/${speaker.picture}`;
              const imageModule = speakerImages[imagePath];
              let speakerImage;

              try {
                if (imageModule) {
                  const importedImage = await imageModule();
                  speakerImage = importedImage.default;
                }
              } catch (error) {
                console.error(
                  `Error loading image for ${speaker.name}:`,
                  error,
                );
              }

              return (
                <li
                  class:list={[
                    {
                      "-ml-3": index > 0,
                    },
                  ]}
                >
                  {speakerImage && (
                    <Image
                      alt={`Photo de ${speaker.name}`}
                      src={speakerImage}
                      width={50}
                      height={50}
                      loading="eager"
                      decoding="async"
                      quality="max"
                      class:list={[
                        "rounded-full border-2 border-white object-cover",
                      ]}
                    />
                  )}
                </li>
              );
            })}
          </ul>
          <div>
            <h4 class="text-sm font-bold">«{talk.title}»</h4>
            <span class="nowrap text-sm" />
            {talk.speakers.map((speaker, index) => (
              <span>
                <a
                  href={speaker.link}
                  class="hover:text-linkPurpleHover font-semibold text-linkPurple underline"
                >
                  {speaker.name}
                </a>
                {index < talk.speakers.length - 1 && " et"}
              </span>
            ))}
          </div>
        </div>
      </div>
    ))
  }
</div>
